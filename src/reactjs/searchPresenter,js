//searchPresenter.js React
import SearchFormView from "../views/searchFormView.js"
import SearchResultsView from "../views/searchResultsView.js"
import promiseNoData from "../views/promiseNoData.js"
import { shoppingList, knownTypes } from "../utilities.js"
import {searchDishes, getDishDetails} from "../dishSource.js"


export default
function Search(props){ //React state hook

    //declare constants to be used
    const [promise, setPromise] = React.userStatus(); //rerendering and initializing of component state as empty Object for clickButtonACB
    const [qr, setSearchQuery] = React.userStatus(""); //rerendering and initializing of component state for clickButtonACB
    const [ty, setSearchType] = React.userStatus(""); //rerendering and initializing of component state for clickButtonACB
    const [data, setData] = Reacy.userStatus([]); //rerendering and initializing of component state for clickButtonACB
    const [err, setError] = React.userStatus([]); //rerendering and initializing of component state for clickButtonACB
    

    function wasCreatedACB(){
        setPromise(searchDishes({}))
    }
    React.useEffect(wasCreatedACB, []);

    function promiseIsChangdACB(){

        props.model.setData(null);
        prop.model.setError(null);
        let itIsCanceled = false;

        function changedBackACB(){
            itIsCanceled = true;
        }

        function savingDataACB(data){
            if(!itIsCanceled)
                setData(data);
        }

        function savingErrorACB(error){
            if(!itIsCanceled)
                setError(error);
        }

        if(promise)
            promise.then(savingDataACB).catch(savingErrorACB);
        return changedBackACB;
    }
    React.useEffect(promiseIsChangdACB, [promise])

    function clickButtonACB(){ //search on click button
        setPromise(searchDishes({qr: query, ty: type}));
        //props.model.doSearch(props.model.searchParams);
    }

    function inputOnChangeACB(qr){ //to look up for a specific dish when inputing a string (1st element)
        props.model.setSearchQuery(qr);
        //console.log(value)
    }

    function setTypeOnSearchACB(ty){ //set choices from the TypeDish menu
        props.model.setSearchType(ty);
    }

    function changeDishOnClickACB(dish){ //to look up for another specific dish when inputing a string (1st element)
        //console.log(dish);
        props.model.setCurrentDish(dish.id);
    }


    /*if(!props.model.searchResultsPromiseState.promise) {props.model.doSearch({promise: "foo",
          data: "bar"});}*/
    return (<div>
                <SearchFormView dishTypeOptions={knownTypes} onSearch={clickButtonACB} inputOnChange={inputOnChangeACB} typeOnChange={setTypeOnSearchACB} />
                {promiseNoData({promise: promise, data: data, error: err}) || //promiseNoData has {name: value} as structure
                <SearchResultsView searchResults = {props.model.searchResultsPromiseState.data} onChangeDish={changeDishOnClickACB}/>}
            </div>
    );
}